{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vrotaru\\\\OneDrive - MasterControl\\\\Desktop\\\\First-React-App\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // When a Square is clicked, the onClick function provided by the Board is called. Here’s a review of how this is achieved:\n// 1. The onClick prop on the built-in DOM <button> component tells React to set up a click event listener.\n// 2. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method.\n// 3. This event handler calls this.props.onClick(). The Square’s onClick prop was specified by the Board.\n// 4. Since the Board passed onClick={() => this.handleClick(i)} to Square, the Square calls this.handleClick(i) when clicked.\n// 5. We have not defined the handleClick() method yet, so our code crashes. If you click a square now, you should see a red error screen saying something like “this.handleClick is not a function”.\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, props.value);\n} // To collect data from multiple children, or to have two child components communicate \n// with each other, you need to declare the shared state in their parent component instead.\n//  The parent component can pass the state back down to the children by using props;\n//  this keeps the child components in sync with each other and with the parent component.\n\n\nclass Board extends React.Component {\n  // Square components are now controlled components. The Board has full control over them.\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 16\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true,\n      stepNumber: 0\n    };\n  }\n\n  handleClick(i) {\n    //history's value ensures that if we “go back in time” and then make a new move from that point, we throw away all the “future” history that would now become incorrect.\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      //This ensures we don’t get stuck showing the same move after a new one has been made.\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.state = {\n      xIsNext: step % 2 === 0,\n      stepNumber: step\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; //rendering the currently selected move according to stepNumber\n\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Move to Step ' + move : 'Restart ';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: move,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/vrotaru/OneDrive - MasterControl/Desktop/First-React-App/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","xIsNext","stepNumber","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","moves","map","move","desc","status","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\n// When a Square is clicked, the onClick function provided by the Board is called. Here’s a review of how this is achieved:\r\n\r\n// 1. The onClick prop on the built-in DOM <button> component tells React to set up a click event listener.\r\n// 2. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method.\r\n// 3. This event handler calls this.props.onClick(). The Square’s onClick prop was specified by the Board.\r\n// 4. Since the Board passed onClick={() => this.handleClick(i)} to Square, the Square calls this.handleClick(i) when clicked.\r\n// 5. We have not defined the handleClick() method yet, so our code crashes. If you click a square now, you should see a red error screen saying something like “this.handleClick is not a function”.\r\nfunction Square(props) {\r\n    return(\r\n        <button className=\"square\" onClick={props.onClick}> \r\n            {props.value}\r\n        </button> \r\n    );\r\n}\r\n// To collect data from multiple children, or to have two child components communicate \r\n// with each other, you need to declare the shared state in their parent component instead.\r\n//  The parent component can pass the state back down to the children by using props;\r\n//  this keeps the child components in sync with each other and with the parent component.\r\nclass Board extends React.Component{\r\n    // Square components are now controlled components. The Board has full control over them.\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n      }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n        }\r\n    }\r\n\r\n    handleClick(i){\r\n        //history's value ensures that if we “go back in time” and then make a new move from that point, we throw away all the “future” history that would now become incorrect.\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1); \r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext? 'X':'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length, //This ensures we don’t get stuck showing the same move after a new one has been made.\r\n            xIsNext: !this.state.xIsNext,\r\n        })\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.state = {\r\n            xIsNext: (step % 2) === 0,\r\n            stepNumber: step \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber]; //rendering the currently selected move according to stepNumber\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Move to Step '+ move : 'Restart ';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n        let status;\r\n        if(winner){\r\n            status = 'Winner: '+winner;\r\n        }else{\r\n            status = 'Next player: '+ (this.state.xIsNext? 'X':'O');\r\n        }\r\n        return(\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                    squares={current.squares}\r\n                     onClick = {(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares){\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n    for (let i = 0; i< lines.length; i++){\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />, document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}